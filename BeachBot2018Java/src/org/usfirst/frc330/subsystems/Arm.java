// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.util.Logger;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX elbow;
    private WPI_TalonSRX wrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Arm() {
    	
    	super();
    	SmartDashboard.putData("Arm", this);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elbow = new WPI_TalonSRX(1);
        
        
        wrist = new WPI_TalonSRX(2);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //TODO Joey: port the following commands for both elbow and wrist
		//        armL.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		//    	armL.reverseSensor(false);
		//    	armL.reverseOutput(false);
		//    	setPIDConstants(ArmConst.proportional, ArmConst.integral, ArmConst.derivative);
		//    	setArmAbsoluteTolerance(ArmConst.tolerance);
		//    	setLowerSoftLimit(ArmConst.limitLowerAngle);
		//    	setUpperSoftLimit(ArmConst.limitUpperAngle);
		//    	armL.enableForwardSoftLimit(true);
		//    	armL.enableReverseSoftLimit(true);
		//    	armL.enableBrakeMode(true);
		//    	armL.setVoltageRampRate(ArmConst.VoltageRampRate);
		//    	armL.configMaxOutputVoltage(ArmConst.MaxOutputVoltage);
        
        //--------------------------------------------------------------------
    	// Logging
    	//--------------------------------------------------------------------
        //TODO log all of the get commands. See 2017 as example
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	
	//--------------------------------------------------------------------
	// Get Methods
	//--------------------------------------------------------------------
	
	//TODO implement getArmAngle
	
	//TODO Implement getArmLowerLimit, getArmUpperLimit
	
	//TODO implement get armOutput
	
	//TODO implement getWristAngle
	
	//TODO Implement getWristLowerLimit, getWristUpperLimit
	
	//TODO implement getArmOutput
	
	//TODO implement getWristOUtput
	
	//TODO Implement getLowerArmLimitTripped, getUpperArmLimitTripped
	
	//TODO IMplement getLowerWristLimitTripped, getUpperWristLimitTripped
    
    //TODO Implement getArmOnTarget
    //TODO IMplement getWristOnTarget
	
	//--------------------------------------------------------------------
	// Set Methods
	//--------------------------------------------------------------------
	
	//TODO Implement setArmOutput
    //TODO Implement setArmAngle
    //TODO Implement setArmPIDConstants
    //TODO IMplement setMaxArmOutput
    
    //TODO Implement setWristOutput
    //TODO Implement setWristAngle
    //TODO Implement setWristPIDConstants
    //TODO IMplement setMaxWristOutput
    
	
	//--------------------------------------------------------------------
	// Other Methods
	//--------------------------------------------------------------------
	public void stopArm() {
		elbow.disable();
		Logger.getInstance().println("Arm disabled", Logger.Severity.INFO);
		//TODO Makena: See 2016 code for an example of what else needs to be added
	}

	public void stopWrist() {
		wrist.disable();
		Logger.getInstance().println("Wrist disabled", Logger.Severity.INFO);
	}
	
	//TODO Implement manualArm
	
}

