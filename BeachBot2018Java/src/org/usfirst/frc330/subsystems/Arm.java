// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.Robot;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.ArmConst;
import org.usfirst.frc330.constants.WristConst;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX elbow;
    private WPI_TalonSRX wrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Arm() {
    	
    	super();
    	SmartDashboard.putData("Arm", this);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elbow = new WPI_TalonSRX(1);
        
        
        wrist = new WPI_TalonSRX(2);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //TODO Joey: port the following commands for both elbow and wrist
		//        armL.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		//    	armL.reverseSensor(false);
		//    	armL.reverseOutput(false);
		//    	setPIDConstants(ArmConst.proportional, ArmConst.integral, ArmConst.derivative);
		//    	setArmAbsoluteTolerance(ArmConst.tolerance);
		//    	setLowerSoftLimit(ArmConst.limitLowerAngle);
		//    	setUpperSoftLimit(ArmConst.limitUpperAngle);
		//    	armL.enableForwardSoftLimit(true);
		//    	armL.enableReverseSoftLimit(true);
		//    	armL.enableBrakeMode(true);
		//    	armL.setVoltageRampRate(ArmConst.VoltageRampRate);
		//    	armL.configMaxOutputVoltage(ArmConst.MaxOutputVoltage);
        
        //		Joey's notes							all time outs estimated to 10 ms
        												//Device,pidIdx,timeoutMS
        elbow.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
        elbow.setInverted(false);
        elbow.setSensorPhase(false);
        setPIDConstantsArm(ArmConst.proportional, ArmConst.integral, ArmConst.derivative,true);
        setArmAbsoluteTolerance(ArmConst.tolerance);
        /*
        setLowerSoftLimit(ArmConst.limitLowerAngle);
		setUpperSoftLimit(ArmConst.limitUpperAngle);
		*/
		elbow.configForwardSoftLimitEnable(true, 10);
		elbow.configReverseSoftLimitEnable(false, 10);
		elbow.setNeutralMode(NeutralMode.Brake);
		//create constants for these two in ArmConst
		elbow.configOpenloopRamp(ArmConst.VoltageRampRate, 10);
		elbow.configNominalOutputForward(ArmConst.MaxOutputVoltage, 10);
		
		
		wrist.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
		wrist.setInverted(false);
		wrist.setSensorPhase(false);
		setPIDConstantsWrist(WristConst.proportional,WristConst.integral,WristConst.derivative,true);
		setArmAbsoluteTolerance(ArmConst.tolerance);
		/*
        setLowerSoftLimit(ArmConst.limitLowerAngle);
		setUpperSoftLimit(ArmConst.limitUpperAngle);
		*/
		wrist.configForwardSoftLimitEnable(true, 10);
		wrist.configReverseSoftLimitEnable(false, 10);
		wrist.setNeutralMode(NeutralMode.Brake);
		//create constants for these two in ArmConst
		wrist.configOpenloopRamp(WristConst.VoltageRampRate, 10);
		wrist.configNominalOutputForward(WristConst.MaxOutputVoltage, 10);
		
        
        
        //--------------------------------------------------------------------
    	// Logging
    	//--------------------------------------------------------------------
        //TODO log all of the get commands. See 2017 as example
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	
	//--------------------------------------------------------------------
	// Get Methods
	//--------------------------------------------------------------------
	
	//TODO implement getArmAngle\
    public double getArmAngle()
	{
		return (-convertRotationsToDegrees(elbow.getSelectedSensorPosition(0)));
	} //joey was here
    
	
	//TODO Implement getArmLowerLimit, getArmUpperLimit
    /*
    public double getLowerLimit()
	{
		return (convertTicksToDegrees(Arm.getForwardSoftLimit()));
	}
    public double getUpperLimit()
	{
		return (convertTicksToDegrees(Arm.getReverseSoftLimit()));
	}
    
    
    */
	
	//TODO implement get armOutput
    public double getArmOutput() {
		return elbow.getMotorOutputVoltage()/elbow.getBusVoltage();
	}
	
	//TODO implement getWristAngle
    public double getWristAngle()
	{
		return (-convertRotationsToDegrees(wrist.getSelectedSensorPosition(0)));
	} //joey was here
    
	
	//TODO Implement getWristLowerLimit, getWristUpperLimit
	
	
	//TODO implement getWristOUtput
    public double getWristOutput() {
  		return wrist.getMotorOutputVoltage()/wrist.getBusVoltage();
  	}
	
	//TODO Implement getLowerArmLimitTripped, getUpperArmLimitTripped
	
	//TODO IMplement getLowerWristLimitTripped, getUpperWristLimitTripped
    
    //TODO Implement getArmOnTarget
    
    //TODO IMplement getWristOnTarget
	
	//--------------------------------------------------------------------
	// Set Methods
	//--------------------------------------------------------------------
	
	//TODO Implement setArmOutput
  //WARNING SET(MODE,VALUE);  ---VALUE UNKNOWN
    public void setArm(double output) {
    //	changeControlMode(ControlMode.PercentOutput);
    	elbow.set(ControlMode.PercentOutput, output);
    }
    //WARNING SET(MODE,VALUE);  ---VALUE UNKNOWN
    //TODO Implement setArmAngle
    public void setArmAngle(double position) {
    	elbow.set(ControlMode.Position, position);
    	elbow.set(convertDegreesToRotations(position));
    //	if (SCtable != null)
    //		SCtable.putNumber("setpoint", position);
    }
    
    
    //TODO Implement setArmPIDConstants
    public void setPIDConstantsArm (double P, double I, double D, boolean timeout)
   	{
       	if(timeout) {
       		//assume using main PID loop (index 0)
       		elbow.config_kP(0, P, 10);
       		elbow.config_kI(0, I, 10);
       		elbow.config_kD(0, D, 10);
       	}
       	else {
   	    	//assume using main PID loop (index 0)
   			elbow.config_kP(0, P, 0);
   			elbow.config_kI(0, I, 0);
   			elbow.config_kD(0, D, 0);
       	}
       	
           Logger.getInstance().println("Lift PID set to: " + P + ", " + I + ", " + D, Severity.INFO);
   	}
    
    //TODO IMplement setMaxArmOutput
    public void setMaxArmOutput(double percentOut){
    	elbow.configNominalOutputForward(percentOut,10);
    	Logger.getInstance().println("Max Arm output set to: " + percentOut, Severity.INFO);
    }
    
    //TODO Implement setWristOutput
  //WARNING SET(MODE,VALUE);  ---VALUE UNKNOWN
    public void setWrist(double output) {
    //	changeControlMode(ControlMode.PercentOutput);
    	wrist.set(ControlMode.PercentOutput, 0);
    	wrist.set(output);
    }
    
    //TODO Implement setWristAngle
    public void setWristAngle(double position) {
    	wrist.set(ControlMode.Position, 0);
    	wrist.set(convertDegreesToRotations(position));
    //	if (SCtable != null)
    //		SCtable.putNumber("setpoint", position);
    }
    
    //TODO Implement setWristPIDConstants
    public void setPIDConstantsWrist (double P, double I, double D, boolean timeout)
   	{
       	if(timeout) {
       		//assume using main PID loop (index 0)
       		wrist.config_kP(0, P, 10);
       		wrist.config_kI(0, I, 10);
       		wrist.config_kD(0, D, 10);
       	}
       	else {
   	    	//assume using main PID loop (index 0)
   			wrist.config_kP(0, P, 0);
   			wrist.config_kI(0, I, 0);
   			wrist.config_kD(0, D, 0);
       	}
       	
           Logger.getInstance().println("Lift PID set to: " + P + ", " + I + ", " + D, Severity.INFO);
   	}
    
    
    
    //TODO IMplement setMaxWristOutput
    public void setMaxWristOutput(double percentOut){
    	wrist.configNominalOutputForward(percentOut,10);
    	Logger.getInstance().println("Max wrist output set to: " + percentOut, Severity.INFO);
    }
    
	
	//--------------------------------------------------------------------
	// Other Methods
	//--------------------------------------------------------------------
	public void stopArm() {
		elbow.disable();
		Logger.getInstance().println("Arm disabled", Logger.Severity.INFO);
		//TODO Makena: See 2016 code for an example of what else needs to be added
	}

	public void stopWrist() {
		wrist.disable();
		Logger.getInstance().println("Wrist disabled", Logger.Severity.INFO);
	}
	
	//TODO Implement manualArm
	 int inertiaCounter;
	    public void manualArm() {	
	    	double gamepadCommand = -Robot.oi.armGamePad.getY();
	    	double angle;
	    	
	    	if (Math.abs(gamepadCommand) > ArmConst.gamepadDeadZone) {
	    		setArm(gamepadCommand/Math.abs(gamepadCommand)*Math.pow(gamepadCommand, 2));
	    		inertiaCounter = ArmConst.inertiaCounter;
	    	}
	    	else if (inertiaCounter > 0) {
	    		inertiaCounter--;
				setArm(0);
	    	}
	    	else if ( elbow.getControlMode() != ControlMode.Position) {
				angle = getArmAngle();
				
				
//				if (angle < getLowerLimit())
//					angle = getLowerLimit();
//				else if (angle > getUpperLimit())
//					angle = getUpperLimit();

				//setArmAngle(angle);
	    	} 
	    	
	    }
	    double tolerance = 0;
	    public void setArmAbsoluteTolerance(double absvalue) {
	    	tolerance = absvalue;
		}
	    /*
	    private void setLowerSoftLimit(double lowerAngle) {
	    //	Arm.setForwardSoftLimit(convertDegreesToRotations(lowerAngle));
	    	elbow.configForwardSoftLimitThreshold(convertDegreesToRotations(lowerAngle), 10);
	    }
	    
	    private void setUpperSoftLimit(double upperAngle) {
	    	elbow.configReverseSoftLimitThreshold(convertDegreesToRotations(upperAngle));
	    	}
	    	*/
	    
	    private int convertDegreesToTicks(double degrees) {
	    	return (int)(degrees * ArmConst.maxEncoderCounts / ArmConst.maxAngleDegrees + 0.5);
	    }
	    
	    private double convertTicksToDegrees(int ticks) {
	    	return (ticks * ArmConst.maxAngleDegrees / ArmConst.maxEncoderCounts);
	    }
	    
	    private double convertDegreesToRotations(double degrees) {
	    	return (-degrees / ArmConst.maxAngleDegrees);
	    }
	    
	    private double convertRotationsToDegrees(double rotations) {
	    	return (rotations * ArmConst.maxAngleDegrees);
	    }
	    
}

