// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.util.CSVLoggable;
import org.usfirst.frc330.util.CSVLogger;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc330.wpilibj.DummyPIDOutput;
import org.usfirst.frc330.wpilibj.MultiPIDController;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;
import org.usfirst.frc330.wpilibj.BBSolenoid;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	//TODO make drive motors Sparks
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AHRS navX;
    private BBSolenoid pTO;
    private BBDoubleSolenoid shifters;
    private Encoder driveEncoderRight;
    private Encoder driveEncoderLeft;
    private WPI_TalonSRX leftDrive1;
    private WPI_TalonSRX leftDrive2;
    private WPI_TalonSRX leftDrive3;
    private SpeedControllerGroup leftDrive;
    private WPI_TalonSRX rightDrive1;
    private WPI_TalonSRX rightDrive2;
    private WPI_TalonSRX rightDrive3;
    private SpeedControllerGroup rightDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double  gyro_prevVal = 0.0;
    int     ctrRollOver  = 0;
    boolean fFirstUse    = true;
    double  left, right;
    
    public MultiPIDController gyroPID, leftDrivePID, rightDrivePID;
    private DummyPIDOutput gyroOutput, leftDriveOutput, rightDriveOutput;

    public Chassis() {
    	
    	super();
    	
    	PIDSource gyroSource = new PIDSource()
        {

			@Override
			public double pidGet()
			{
				return getAngle();
			}

			@Override
			public void setPIDSourceType(PIDSourceType pidSource)
			{
			}

			@Override
			public PIDSourceType getPIDSourceType()
			{
				return PIDSourceType.kDisplacement;
			}
        	
        };
        
        gyroOutput = new DummyPIDOutput();
        leftDriveOutput = new DummyPIDOutput();
        rightDriveOutput = new DummyPIDOutput();
    	
        //TODO Create ChassisConst file and put in default values to make this code valid
        //TODO make the period of the PIDControllers 0.02 seconds (50 hz)
        
        gyroPID = new MultiPIDController(ChassisConst.GyroTurnLow, gyroSource,gyroOutput,"Gyro");
        leftDrivePID = new MultiPIDController(ChassisConst.DriveLow, driveEncoderLeft,leftDriveOutput,"LeftDrive");
        rightDrivePID = new MultiPIDController(ChassisConst.DriveLow, driveEncoderRight,rightDriveOutput, "RightDrive");
        
        //TODO Find a non-deprecated function to use for this
        gyroPID.setToleranceBuffer(ChassisConst.gyroTolerancebuffer);
        
        SmartDashboard.putData("gyroPID", gyroPID);
        SmartDashboard.putData("leftDrivePID", leftDrivePID);
        SmartDashboard.putData("rightDrivePID", rightDrivePID);
        
        double pulsePerRevolutionLeft, pulsePerRevolutionRight;
    	pulsePerRevolutionRight = ChassisConst.practicePulsePerRevolution;
    	pulsePerRevolutionLeft = ChassisConst.pulsePerRevolution;
        
        double distanceperpulse = Math.PI*ChassisConst.wheelDiameter/pulsePerRevolutionLeft /
        		ChassisConst.encoderGearRatio/ChassisConst.gearRatio * ChassisConst.Fudgefactor;

        //TODO Fix these lines of code
        driveEncoderRight.setReverseDirection(true);
        driveEncoderLeft.setDistancePerPulse(distanceperpulse);
        
        distanceperpulse = Math.PI*ChassisConst.wheelDiameter/pulsePerRevolutionRight /
        		ChassisConst.encoderGearRatio/ChassisConst.gearRatio * ChassisConst.Fudgefactor;
        
        driveEncoderRight.setDistancePerPulse(distanceperpulse);
        
        //TODO update to the latest RobotBuilderExtensions so that the deprecated addSensor code below is no longer used.
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        navX = new AHRS(Port.kMXP, (byte)50);
        LiveWindow.addSensor("Chassis", "NavX", navX);
        
        pTO = new BBSolenoid(0, 0);
        addChild(pTO);
        
        shifters = new BBDoubleSolenoid(0, 1, 2);
        addChild(shifters);
        
        driveEncoderRight = new Encoder(0, 1, false, EncodingType.k4X);
        addChild(driveEncoderRight);
        driveEncoderRight.setDistancePerPulse(1.0);
        driveEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        driveEncoderLeft = new Encoder(2, 3, false, EncodingType.k4X);
        addChild(driveEncoderLeft);
        driveEncoderLeft.setDistancePerPulse(1.0);
        driveEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        leftDrive1 = new WPI_TalonSRX(4);
        
        
        leftDrive2 = new WPI_TalonSRX(5);
        
        
        leftDrive3 = new WPI_TalonSRX(6);
        
        
        leftDrive = new SpeedControllerGroup(leftDrive1, leftDrive2 , leftDrive3 );
        addChild(leftDrive);
        
        rightDrive1 = new WPI_TalonSRX(7);
        
        
        rightDrive2 = new WPI_TalonSRX(8);
        
        
        rightDrive3 = new WPI_TalonSRX(9);
        
        
        rightDrive = new SpeedControllerGroup(rightDrive1, rightDrive2 , rightDrive3 );
        addChild(rightDrive);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //-----------------------------------------------------------------------
        // Logging
        //-----------------------------------------------------------------------
        
        //TODO Finish logging. See 2017 for examples -EJO 
        //Joe: instead of logging left&right Drive1,2,3, log leftDrive and rightDrive. Don't need to log pitch & roll.
        CSVLoggable temp = new CSVLoggable(true) {
			public double get() { return driveEncoderLeft.getDistance(); }
    	};
    	CSVLogger.getInstance().add("DriveTrainDistanceL", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return driveEncoderRight.getDistance(); }
    	};
    	CSVLogger.getInstance().add("DriveTrainDistanceR", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return driveEncoderLeft.getRate(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRateL", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return driveEncoderRight.getRate(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRateR", temp);    	

    	temp = new CSVLoggable() {
			public double get() { return leftDrive1.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainLeft1", temp);
    	
    	temp = new CSVLoggable() {
			public double get() { return rightDrive1.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRight1", temp);
    	
    	temp = new CSVLoggable() {
			public double get() { return leftDrive2.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainLeft2", temp);
    	
    	temp = new CSVLoggable() {
			public double get() { return rightDrive2.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRight2", temp);
    	
    	temp = new CSVLoggable() {
			public double get() { return leftDrive3.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainLeft3", temp);
    	
    	temp = new CSVLoggable() {
			public double get() { return rightDrive3.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRight3", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getAngle(); }  		
    	};    	
    	CSVLogger.getInstance().add("ChassisAngle", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return gyroPID.getSetpoint(); }  		
    	};    	
    	CSVLogger.getInstance().add("GyroSetpoint", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getGyroComp(); }  		
    	};    	
    	CSVLogger.getInstance().add("GyroCompensation", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return navX.isConnected() ? 1: 0; }  		
    	};    	
    	CSVLogger.getInstance().add("GyroIsConnected", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return navX.isCalibrating() ? 1: 0; }  		
    	};    	
    	CSVLogger.getInstance().add("GyroIsCalibrating", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getX(); }  		
    	};     	
    	CSVLogger.getInstance().add("ChassisX", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getY(); }  		
    	};      	
    	CSVLogger.getInstance().add("ChassisY", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getPressure(); }  		
    	};  
    	CSVLogger.getInstance().add("Pressure", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { 
				DoubleSolenoid.Value state = shifter.get();
				double state_int;
				if (state == DoubleSolenoid.Value.kForward)
					state_int = 1.0;
				else
					state_int = 0.0;
				return state_int;}  		
    	};  
    	CSVLogger.getInstance().add("Shifter", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return navX.getPitch(); }  		
    	};  
    	CSVLogger.getInstance().add("ChassisPitch", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return navX.getRoll(); }  		
    	};  
    	CSVLogger.getInstance().add("ChassisRoll", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { 
				if (path == null) 
					return -1;
				return getNextWaypointNumber(); }  		
    	};  
    	CSVLogger.getInstance().add("NextWaypointNumber", temp);
    	
    }
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    private double x = 0, 
        	   y = 0;
    private double prevLeftEncoderDistance  = 0, 
        	   prevRightEncoderDistance = 0;

	public void calcXY()
	{
		 double distance, 
		 	    leftEncoderDistance, 
		 	    rightEncoderDistance, 
		 	    gyroAngle;
		 
		 leftEncoderDistance  = driveEncoderLeft.getDistance();
		 rightEncoderDistance = driveEncoderRight.getDistance();
		 gyroAngle = getAngle();
		 distance =  ((leftEncoderDistance - prevLeftEncoderDistance) + (rightEncoderDistance - prevRightEncoderDistance))/2;
		 x = x + distance * Math.sin(Math.toRadians(gyroAngle));
		 y = y + distance * Math.cos(Math.toRadians(gyroAngle));
		 prevLeftEncoderDistance  = leftEncoderDistance;
		 prevRightEncoderDistance = rightEncoderDistance;
	}
	
	//TODO replace all the code in getAngle with the navX getAngle and replace the code in setGyroComp with the NavX SetAngleAdjustment
	// Function Name: getAngle()
    // Purpose: Return angle relative to 0 instead of -/+ 180 degrees
    public double getAngle()
    {

    	// First case
    	// Old reading: +150 degrees
    	// New reading: +170 degrees
    	// Difference:  (170 - 150) = +20 degrees
    	
    	// Second case
    	// Old reading: -20 degrees
    	// New reading: -50 degrees
    	// Difference : (-50 - -20) = -30 degrees 
    	
    	// Third case
    	// Old reading: +179 degrees
    	// New reading: -179 degrees
    	// Difference:  (-179 - 179) = -358 degrees
    	
    	// Fourth case
    	// Old reading: -179  degrees
    	// New reading: +179 degrees
    	// Difference:  (+150 - -60) = +358 degrees
    	
    	// Declare variables
    	double difference = 0.0;
    	double gyroVal    = 0.0;
    	
    	// Retrieve current yaw value from gyro
    	double yawVal     = navX.getYaw();
        
    	// Has gyro_prevVal been previously set?
    	// If not, return do not calculate, return current value
    	if( !fFirstUse )
    	{
    		// Determine count for rollover counter
    		difference = yawVal - gyro_prevVal;

	    	// Clockwise past +180 degrees
    		// If difference > 180*, increment rollover counter
	    	if( difference < -180.0 ) {
	    		ctrRollOver++;
	   		
	    	// Counter-clockwise past -180 degrees\
	    	// If difference > 180*, decrement rollover counter
	    	}
	    	else if ( difference > 180.0 ) {
	    		ctrRollOver--;
	    	} 
    	}
    	
    	// Mark gyro_prevVal as being used
    	fFirstUse = false;
    		
    	// Calculate value to return back to calling function
    	// e.g. +720 degrees or -360 degrees
    	gyroVal = yawVal + (360.0 * ctrRollOver);
    	gyro_prevVal = yawVal;
    	
    	return gyroVal + gyroComp;
    } /* End getAngle() */
    
    double gyroComp = 0;
    
    public void setGyroComp(double compensation) {
    	gyroComp = compensation;
    }
    
    public double getGyroComp() {
    	return gyroComp;
    }
    

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void ShiftHigh() {
    	shifters.set(DoubleSolenoid.Value.kForward);
    }
    public void ShiftLow() {
    	shifters.set(DoubleSolenoid.Value.kReverse);
    }
    
    public void tankDrive(Joystick leftJoystick, Joystick rightJoystick) {
       left = -leftJoystick.getY();
       right = -rightJoystick.getY();
    }
    
    public void tankDrive(double left, double right) {
        this.left = left;
        this.right = right;
    }
    
    public void stopDrive() {
        if (gyroPID.isEnabled())
            gyroPID.reset();
        if (leftDrivePID.isEnabled())
            leftDrivePID.reset();
        if (rightDrivePID.isEnabled())
            rightDrivePID.reset();        
       
        tankDrive(0, 0);  
    }

    //------------------------------------
    // Set methods
    //------------------------------------
	public void setPTOengaged() {
		pTO.set(true);
	}
	
	public void setPTOdisengaged() {
		pTO.set(false);
	}
}

