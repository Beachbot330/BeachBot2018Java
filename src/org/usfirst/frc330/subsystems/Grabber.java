// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.Robot;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.GrabberConst;
import org.usfirst.frc330.constants.WristConst;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;




/**
 *
 */
public class Grabber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX intakeLeft;
    private BBDoubleSolenoid pincher;
    private WPI_TalonSRX intakeRight;
    private AnalogInput sensorL;
    private AnalogInput sensorC;
    private AnalogInput sensorR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Grabber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLeft = new WPI_TalonSRX(3);
        
        
        pincher = new BBDoubleSolenoid(0, 3, 4);
        addChild(pincher);
        
        intakeRight = new WPI_TalonSRX(10);
        
        
        sensorL = new AnalogInput(1);
        addChild(sensorL);
        
        sensorC = new AnalogInput(2);
        addChild(sensorC);
        
        sensorR = new AnalogInput(3);
        addChild(sensorR);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        intakeLeft.setInverted(GrabberConst.leftRollerInversionStatus); 	//TODO check to see which intake needs to be inverted
        intakeRight.setInverted(GrabberConst.rightRollerInversionStatus);	//update GrabberConst with correct booleans
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	sL = getSensorLOutput();
    	sR = getSensorROutput();
    	sC = getSensorCOutput();
    	
    	updateSensorStatus(sL, sR, sC);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public int getSensorLOutput() {
    	return sensorL.getValue(); //can be changed if needed
    }
    
    public int getSensorCOutput() {
    	return sensorC.getValue();
    }
    
    public int getSensorROutput() {
    	return sensorR.getValue();
    }
    
    public void openClaw() {
    	pincher.set(DoubleSolenoid.Value.kForward);
    }
    
    public void closeClaw() {
    	pincher.set(DoubleSolenoid.Value.kReverse);
    }
    
  //TODO verify direction for roller on/off and rollerreverse on/off -EJO
    public void RollerOn() {
    	intakeLeft.set(GrabberConst.leftRollerMaxSpeed);
    	intakeRight.set(GrabberConst.rightRollerMaxSpeed);
    }
    public void RollerOff() {
    	intakeLeft.stopMotor();
    	intakeRight.stopMotor();
    }
    public void RollerReverse() {
    	intakeLeft.set((GrabberConst.leftRollerMaxSpeed * -1)); //the negative one is to make it rotate the other way
    	intakeRight.set((GrabberConst.rightRollerMaxSpeed * -1));
    }
    public void RollerReverseOff() {
    	intakeLeft.stopMotor();
    	intakeRight.stopMotor();
    }
    
	public void pickupOff() {
		intakeLeft.disable();
	}
	
	// ----------------
	// hasCube methods
	// ----------------
	
	private static boolean sLstatus;
    private static boolean sCstatus;
    private static boolean sRstatus;
    
    private int sL;
	private int sR; 
	private int sC; 
    
    public boolean hasCube() { //TODO Allen: check everything that is here
    	int sensorsReceivingInput = getNumberOfSensorsReceivingInput();
    	
    	if(sensorsReceivingInput == 2) return  isDistanceWithinMaximumOuterDistance(sL, sR, sC);
    	else if(sensorsReceivingInput == 3) {
	    		double leftAngle = getAngleBetweenSensors(sL, sC);
	    		double rightAngle = getAngleBetweenSensors(sR, sC);
	    		
	    		if(Math.abs(rightAngle - leftAngle) < GrabberConst.sensorAngleTolerance) return true; 													//if angles are =, we have cube 
	    		else if(leftAngle > rightAngle) return  isAngleWithinMaximumOuterDistance(rightAngle, sR);			//if shallow angle is within 12in, we have cube
	    		else if(rightAngle > leftAngle) return  isAngleWithinMaximumOuterDistance(leftAngle, sL);			//if shallow angle is within 12in, we have cube
	    		else if(Math.abs((leftAngle * -1) - rightAngle) < GrabberConst.sensorAngleTolerance) return  isAngleWithinMaximumOuterDistance(leftAngle, sL);	//if shallow angle is within 12in, we have cube
	    		else return false;
    	}
    	else return false;
    }
	
	public boolean hasCubeHorizontal() { //hasCube w/ vertical and horizontal sensors
		int sensorsReceivingInput = getNumberOfSensorsReceivingInput();
		
		if(sensorsReceivingInput < 3) return false;
		
		if((sR + sL) < GrabberConst.horizontalSensorDifference) return false;
		
		if(sC > GrabberConst.sensorMaximumOuterDistance) return false;
		else if(sC > GrabberConst.sensorMinimumOuterDistance) return true;
		else if(sC > GrabberConst.sensorMaximumInnerDistance) return false;
		else if(sC < GrabberConst.sensorMaximumInnerDistance) return true;
		else return false;
	}
    
	public boolean hasCubeCanted() { //hasCube w/ canted sensors on rear of robot & center vertical sensor
		
		if(sLstatus && sRstatus) return true;
		else if(sC < GrabberConst.centerSensorMaximumInnerDistance) return true;
		else return false;
	}
	
	public boolean hasCubeClose() {
		int sensorsReceivingInput = getNumberOfSensorsReceivingInput();
		
		if(sensorsReceivingInput < 3) return false;
		else if(sensorsReceivingInput == 3) {
			double leftAngle = getAngleBetweenSensors(sL, sC);
			double rightAngle = getAngleBetweenSensors(sR, sC);
			
			if(Math.abs(rightAngle - leftAngle) < GrabberConst.sensorAngleTolerance) return true; 													
    		else if(leftAngle > rightAngle) return  isAngleWithinMaximumOuterDistance(rightAngle, sR);			
    		else if(rightAngle > leftAngle) return  isAngleWithinMaximumOuterDistance(leftAngle, sL);			
    		else if(Math.abs((leftAngle * -1) - rightAngle) < GrabberConst.sensorAngleTolerance) return  isAngleWithinMaximumOuterDistance(leftAngle, sL);
    		else return false;
		} else return false;
	}
    
	 // ---------------------------
	 // Private methods for hasCube
	 // --------------------------- 
    
    private boolean isDistanceWithinMaximumOuterDistance(int leftSensorDistance, int rightSensorDistance, int centerSensorDistance) {
    	if(!sLstatus) {
    		if(centerSensorDistance < GrabberConst.sensorMaximumOuterDistance 
    		&& rightSensorDistance < GrabberConst.sensorMaximumOuterDistance) return true; 		//cube is within 12in
    		else return false;
     	} else if(!sCstatus) {
     		if(leftSensorDistance < GrabberConst.sensorMaximumOuterDistance 
     		&& rightSensorDistance < GrabberConst.sensorMaximumOuterDistance) return true;		//cube is within 12in
     		else return false;
      	} else if(!sRstatus) {
      		if(centerSensorDistance < GrabberConst.sensorMaximumOuterDistance 
      		&& leftSensorDistance < GrabberConst.sensorMaximumOuterDistance) return true;		//cube is within 12 in
      		else return false;
      	} else return false;
    }
    
    private boolean isAngleWithinMaximumOuterDistance(double shallowAngle, int sensorDistance) {
    	double sinInRad = Math.sin(Math.toRadians(shallowAngle));
    	double distance = (Math.toDegrees(sinInRad) * 13) + sensorDistance; 	//the distance is the hypotenuse (which is equal to box length)
    	
    	if(distance < GrabberConst.sensorMaximumOuterDistance) return true;
    	else return false;
    }
    
    private void updateSensorStatus(int leftSensorOutput, int rightSensorOutput, int centerSensorOutput) {
    	if(leftSensorOutput > GrabberConst.sensorMaxLength) sLstatus = false;
    	else sLstatus = true;
    	if(rightSensorOutput > GrabberConst.sensorMaxLength) sRstatus = false;
    	else sRstatus = true;
    	if(centerSensorOutput > GrabberConst.sensorMaxLength) sCstatus = false;
    	else sCstatus = true;
    }
    
    private int getNumberOfSensorsReceivingInput() { //make sure you call updateSensorStatus first!!!!!!!!!!!!!
    	int numberOfSensorsReceivingInput = 0;
    	if(sLstatus) numberOfSensorsReceivingInput++;
    	if(sRstatus) numberOfSensorsReceivingInput++;
    	if(sCstatus) numberOfSensorsReceivingInput++;
    	return numberOfSensorsReceivingInput; 
    }
    
    private double getAngleBetweenSensors(int sideOutput, int centerOutput) {
    	double y = centerOutput - sideOutput;
		double x = GrabberConst.distanceBetweenSensors;
		return Math.toDegrees(Math.atan2(y, x));
	}
}

