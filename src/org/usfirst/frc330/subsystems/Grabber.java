// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc330.subsystems;

import org.usfirst.frc330.constants.GrabberConst;
import org.usfirst.frc330.util.CSVLoggable;
import org.usfirst.frc330.util.CSVLogger;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;
import org.usfirst.frc330.wpilibj.SharpIR;
import org.usfirst.frc330.wpilibj.SharpIR.SharpType;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DoubleSolenoid;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 *
 */

public class Grabber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX intakeLeft;
    private BBDoubleSolenoid pincher;
    private WPI_TalonSRX intakeRight;
    private SharpIR grabberIRLeft;
    private SharpIR grabberIRCenter;
    private SharpIR grabberIRRight;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Grabber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLeft = new WPI_TalonSRX(3);
        
        
        pincher = new BBDoubleSolenoid(0, 3, 4);
        addChild(pincher);
        
        intakeRight = new WPI_TalonSRX(10);
        
        
        grabberIRLeft = new SharpIR(SharpType.GP2Y0A41SK0F, 1);
        addChild(grabberIRLeft);
        
        grabberIRCenter = new SharpIR(SharpType.GP2Y0A41SK0F, 2);
        addChild(grabberIRCenter);
        
        grabberIRRight = new SharpIR(SharpType.GP2Y0A41SK0F, 3);
        addChild(grabberIRRight);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        intakeLeft.setInverted(GrabberConst.leftRollerInversionStatus); 	//TODO check to see which intake needs to be inverted
        intakeRight.setInverted(GrabberConst.rightRollerInversionStatus);	//update GrabberConst with correct booleans
        
        //------------------------------------------------------------------------------
        // Logging
        //------------------------------------------------------------------------------
        CSVLoggable temp = new CSVLoggable(true) {
			public double get() { return getSensorLOutput(); }
		};
		CSVLogger.getInstance().add("GetSensorLOutput", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { return getSensorROutput(); }
		};
		CSVLogger.getInstance().add("GetSensorROutput", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { return getSensorCOutput(); }
		};
		CSVLogger.getInstance().add("GetSensorCOutput", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { return leftAngle; }			
		};
		CSVLogger.getInstance().add("LeftAngleBetweenSensors", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { return rightAngle; }			
		};
		CSVLogger.getInstance().add("RightAngleBetweenSensors", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { return fullAngle; }			
		};
		CSVLogger.getInstance().add("FullAngleBetweenSensors", temp);
		
		
		temp = new CSVLoggable(true) {
			public double get() { 
				if(!sRstatus) return 0.0;
				else return 1.0;
			}			
		};
		CSVLogger.getInstance().add("SensorRStatus", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { 
				if(!sCstatus) return 0.0;
				else return 1.0;
			}			
		};
		CSVLogger.getInstance().add("SensorCStatus", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { 
				if(!sLstatus) return 0.0;
				else return 1.0;
			}			
		};
		CSVLogger.getInstance().add("SensorLStatus", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { 
				return getNumberOfSensorsReceivingInput();
			}			
		};
		CSVLogger.getInstance().add("Sensors Receiving Input", temp);
		
		temp = new CSVLoggable(true) {
			public double get() { return ExtrapolDistanceFromAngle; }			
		};
		CSVLogger.getInstance().add("ExtrapolatedDistanceFromAngle", temp);
		
		temp = new CSVLoggable(true) {
			public double get() {
				if(hasCubeClose())
					return 1.0;			
				else 
					return 0.0;
			}			
		};
		CSVLogger.getInstance().add("HasCubeClose", temp);
		
		//---------------------------------
		//				UNUSED
		//---------------------------------
		
//		temp = new CSVLoggable(true) {
//			public double get() {
//				if(hasCube())
//					return 1.0;			
//				else 
//					return 0.0;
//			}			
//		};
//		CSVLogger.getInstance().add("HasCube", temp);
//		
//		temp = new CSVLoggable(true) {
//			public double get() {
//				if(hasCubeHorizontal())
//					return 1.0;			
//				else 
//					return 0.0;
//			}			
//		};
//		CSVLogger.getInstance().add("HasCubeHorizontal", temp);
//		
//		temp = new CSVLoggable(true) {
//			public double get() {
//				if(hasCubeCanted())
//					return 1.0;			
//				else 
//					return 0.0;
//			}			
//		};
//		CSVLogger.getInstance().add("HasCubeCanted", temp);		
    }

    @Override
    public void initDefaultCommand() {
    	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // Set the default command for a subsystem here.
    // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	sL = getSensorLOutput();
    	sR = getSensorROutput();
    	sC = getSensorCOutput();
    	
    	updateSensorStatus(sL, sR, sC);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public double getSensorLOutput() {
    	return grabberIRLeft.getDistance(); //can be changed if needed
    }
    
    public double getSensorCOutput() {
    	return grabberIRCenter.getDistance();
    }
    
    public double getSensorROutput() {
    	return grabberIRRight.getDistance();
    }
    
    public void openClaw() {
    	pincher.set(DoubleSolenoid.Value.kForward);
    }
    
    public void closeClaw() {
    	pincher.set(DoubleSolenoid.Value.kReverse);
    }
    
  //TODO verify direction for roller on/off and rollerreverse on/off -EJO
    public void RollerOn() {
    	intakeLeft.set(GrabberConst.leftRollerMaxSpeed);
    	intakeRight.set(GrabberConst.rightRollerMaxSpeed);
    }
    
    public void RollerOff() {
    	intakeLeft.stopMotor();
    	intakeRight.stopMotor();
    }
    
    public void RollerReverse() {
    	intakeLeft.set((GrabberConst.leftRollerMaxSpeed * -1)); //the negative one is to make it rotate the other way
    	intakeRight.set((GrabberConst.rightRollerMaxSpeed * -1));
    }
    
    public void RollerReverseOff() {
    	intakeLeft.stopMotor();
    	intakeRight.stopMotor();
    }
    
	public void pickupOff() {
		intakeLeft.disable();
	}
	
	// ----------------
	// hasCube methods
	// ----------------
	
	private static boolean sLstatus;
    private static boolean sCstatus;
    private static boolean sRstatus;
    
    private double sL;
	private double sR; 
	private double sC; 
    

	
	double leftAngle, rightAngle, fullAngle;
	
	//Note, hasCubeClose uses isAngleWithingMaximumOuterDistance, but doesn't return the result.
	//Can remove once certain which method to use
	public boolean hasCubeClose() {
		int sensorsReceivingInput = getNumberOfSensorsReceivingInput();
		
		if (sensorsReceivingInput < 3)
			return false;
		
		leftAngle = getAngleBetweenSensors(sL, sC, GrabberConst.distanceBetweenSensors);
	    rightAngle = getAngleBetweenSensors(sC, sR, GrabberConst.distanceBetweenSensors);
	    
		if (sC < sL && sC < sR) {
			double shallowAngle = Math.min(leftAngle, rightAngle);
		    isAngleWithinMaximumOuterDistance(shallowAngle, GrabberConst.distanceBetweenSensors);
		    
			return isCubeWithinMaxOuterDistance(true);
		}
		
	    fullAngle = getAngleBetweenSensors(sL, sR, (GrabberConst.distanceBetweenSensors * 2));
	    
		if ((sL < sC && sC < sR) || (sL > sC && sC > sR)) {
			//offset is smallest distance of the three sensors
			double closetDistance = Math.min(sL, sR);	
			isAngleWithinMaximumOuterDistance(fullAngle, closetDistance);
			
		    closetDistance = Math.abs(sL - sR);	

			return isCubeWithinMaxOuterDistance(false);
		}
		else
			return false;
	}
    
	// ---------------------------
	// Private methods for hasCube
	// --------------------------- 
    
    double ExtrapolDistanceFromAngle;
    
    private boolean isAngleWithinMaximumOuterDistance(double shallowAngle, double offsetDistance) {
    	
    	double sinInRad = Math.sin(Math.toRadians(shallowAngle));
    	//the distance is the hypotenuse (which is equal to box length)
        ExtrapolDistanceFromAngle = (sinInRad * 13) + offsetDistance; 		
    	
    	return ExtrapolDistanceFromAngle < GrabberConst.sensorMaximumOuterDistance;
    }
    
    double extrapolDistance;
    
    private boolean isCubeWithinMaxOuterDistance(boolean isDiamondCase) {
    	double distanceBetweenSensors;		
    	double distance;					//Distance = difference of two sensors to compare
    	double smallestSensorDistance;		//shortest distance of the three sensors
    	
    	if(isDiamondCase) {
        	distanceBetweenSensors = GrabberConst.distanceBetweenSensors;
        	distance = (Math.min(sL, sR))-sC;
        	smallestSensorDistance = sC;
    	}
    	else {
    		distanceBetweenSensors = GrabberConst.distanceBetweenSensors * 2;
        	distance = Math.abs(sL - sR);
        	smallestSensorDistance = Math.min(sL, sR);
    	}
    	
    	extrapolDistance = ((distance * (GrabberConst.maxBoxLengthSensor / distanceBetweenSensors))) + smallestSensorDistance;
    	return (extrapolDistance < GrabberConst.sensorMaximumOuterDistance);
    }
    
    private void updateSensorStatus(double leftSensorOutput, double rightSensorOutput, double centerSensorOutput) {
    	//if sensor reading is greater than max, status = false
    	sLstatus = !(leftSensorOutput > GrabberConst.sensorMaxLength);   	
    	sRstatus = !(rightSensorOutput > GrabberConst.sensorMaxLength);
    	sCstatus = !(centerSensorOutput > GrabberConst.sensorMaxLength);
    }
    
    //make sure you call updateSensorStatus first!!!!!!!!!!!!!
    private int getNumberOfSensorsReceivingInput() { 
    	int numberOfSensorsReceivingInput = 0;
    	if(sLstatus) numberOfSensorsReceivingInput++;
    	if(sRstatus) numberOfSensorsReceivingInput++;
    	if(sCstatus) numberOfSensorsReceivingInput++;
    	
    	return numberOfSensorsReceivingInput; 
    }
    
    private double getAngleBetweenSensors(double leftDistance, double rightDistance, double distanceBetweenSensors) {
    	double y = Math.abs(leftDistance - rightDistance);
		double x = distanceBetweenSensors;
		double AngleBetweenSensors = Math.toDegrees(Math.atan2(y, x));
		
		return AngleBetweenSensors;
	}
    
    //--------------------------------
    //			  UNUSED
    //--------------------------------
    
//	//TODO Allen: check everything that is here
//  public boolean hasCube() { 
//  	int sensorsReceivingInput = getNumberOfSensorsReceivingInput();
//  	
//  	if(sensorsReceivingInput == 2) return  isDistanceWithinMaximumOuterDistance(sL, sR, sC);
//  	else if(sensorsReceivingInput == 3) {
//  		double leftAngle = getAngleBetweenSensors(sL, sC);
//  		double rightAngle = getAngleBetweenSensors(sR, sC);
//  		
//  		if(Math.abs(rightAngle - leftAngle) < GrabberConst.sensorAngleTolerance) return true; 													//if angles are =, we have cube 
//  		else if(leftAngle > rightAngle) return  isAngleWithinMaximumOuterDistance(rightAngle, sR);			//if shallow angle is within 12in, we have cube
//  		else if(rightAngle > leftAngle) return  isAngleWithinMaximumOuterDistance(leftAngle, sL);			//if shallow angle is within 12in, we have cube
//  		else if(Math.abs((leftAngle * -1) - rightAngle) < GrabberConst.sensorAngleTolerance) return  isAngleWithinMaximumOuterDistance(leftAngle, sL);	//if shallow angle is within 12in, we have cube
//  		else return false;
//  	}
//  	else return false;
//  	return false;
//  }
//	
//  //hasCube w/ vertical and horizontal sensors
//	public boolean hasCubeHorizontal() { 
//		int sensorsReceivingInput = getNumberOfSensorsReceivingInput();
//		
//		if(sensorsReceivingInput < 3) return false;
//		
//		if((sR + sL) < GrabberConst.horizontalSensorDifference) return false;
//		
//		if(sC > GrabberConst.sensorMaximumOuterDistance) return false;
//		else if(sC > GrabberConst.sensorMinimumOuterDistance) return true;
//		else if(sC > GrabberConst.sensorMaximumInnerDistance) return false;
//		else if(sC < GrabberConst.sensorMaximumInnerDistance) return true;
//		else return false;
//		return false;
//	}
//  
//	//hasCube w/ angled sensors on rear of robot & center vertical sensor
//	public boolean hasCubeCanted() { 	
//		if(sLstatus && sRstatus) return true;
//		else if(sC < GrabberConst.centerSensorMaximumInnerDistance) return true;
//		else return false;
//		return false;
//	}
//    
//  private boolean isDistanceWithinMaximumOuterDistance(double leftSensorDistance, double rightSensorDistance, double centerSensorDistance) {
//	if(!sLstatus) {
//		return (centerSensorDistance < GrabberConst.sensorMaximumOuterDistance &&
//				rightSensorDistance < GrabberConst.sensorMaximumOuterDistance); 
// 	} 
//	else if(!sCstatus) {
// 		return (leftSensorDistance < GrabberConst.sensorMaximumOuterDistance &&
// 				rightSensorDistance < GrabberConst.sensorMaximumOuterDistance);		
//  	} 
//	else if(!sRstatus) {
//  		return (centerSensorDistance < GrabberConst.sensorMaximumOuterDistance &&
//  				leftSensorDistance < GrabberConst.sensorMaximumOuterDistance);		
//  	} 
//	else {
//		return false;
//	}
//}
}