// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.Robot;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.GrabberConst;
import org.usfirst.frc330.constants.WristConst;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;




/**
 *
 */
public class Grabber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX intakeLeft;
    private BBDoubleSolenoid pincher;
    private WPI_TalonSRX intakeRight;
    private AnalogInput sensorL;
    private AnalogInput sensorC;
    private AnalogInput sensorR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Grabber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLeft = new WPI_TalonSRX(3);
        
        
        pincher = new BBDoubleSolenoid(0, 3, 4);
        addChild(pincher);
        
        intakeRight = new WPI_TalonSRX(10);
        
        
        sensorL = new AnalogInput(1);
        addChild(sensorL);
        
        sensorC = new AnalogInput(2);
        addChild(sensorC);
        
        sensorR = new AnalogInput(3);
        addChild(sensorR);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        intakeLeft.setInverted(GrabberConst.leftRollerInversionStatus); 	//TODO check to see which intake needs to be inverted
        intakeRight.setInverted(GrabberConst.rightRollerInversionStatus);	//update GrabberConst with correct booleans
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public int getSensorLOutput() {
    	return sensorL.getValue(); //can be changed if needed
    }
    
    public int getSensorCOutput() {
    	return sensorC.getValue();
    }
    
    public int getSensorROutput() {
    	return sensorR.getValue();
    }
    
    public void openClaw() {
    	pincher.set(DoubleSolenoid.Value.kForward);
    }
    
    public void closeClaw() {
    	pincher.set(DoubleSolenoid.Value.kReverse);
    }
    
    public boolean hasCube() {
    	int sL = getSensorLOutput();
    	int sC = getSensorCOutput();
    	int sR = getSensorROutput();
    	if(getNumberOfSensorsReceivingInput(sL, sR, sC) == 0 || getNumberOfSensorsReceivingInput(sL, sR, sC) == 1) return false; //if only 1 or 2 sensors are receiving input, we do not have cube
    	else if(getNumberOfSensorsReceivingInput(sL, sR, sC) == 2) return isDistanceWithinTwelveInches();
    	else if(getNumberOfSensorsReceivingInput(sL, sR, sC) == 3) return compareAngles(getAngleBetweenSensors(sL, sC), getAngleBetweenSensors(sR, sC));
        // in development 
    	// TODO: Algorithm needs to be developed
    	//       to figure out which sensor
    	//       input signals that it is "present"
    	return false;
    }
    
    private boolean isDistanceWithinTwelveInches() {
    	return false;
    }
    
    private boolean compareAngles(double angle1, double angle2) {
    	return false;
    }
    
    private int getNumberOfSensorsReceivingInput(int leftSensorOutput, int rightSensorOutput, int centerSensorOutput) {
    	boolean Lstatus;
    	boolean Rstatus;
    	boolean Cstatus;
    	if(leftSensorOutput > GrabberConst.sensorMaxLength) Lstatus = false;
    	else Lstatus = true;
    	if(rightSensorOutput > GrabberConst.sensorMaxLength) Rstatus = false;
    	else Rstatus = true;
    	if(centerSensorOutput > GrabberConst.sensorMaxLength) Cstatus = false;
    	else Cstatus = true;
    	if(!Lstatus && !Rstatus && !Cstatus) return 0; 		// no sensors are receiving input
    	if(Lstatus || Rstatus || Cstatus) {					// any of the sensors are receiving input
    		if(Lstatus && !Rstatus && !Cstatus) return 1;	// one sensor (L) is receiving input
    		if(!Lstatus && Rstatus && !Cstatus) return 1;	// one sensor (R) is receiving input
    		if(!Lstatus && !Rstatus && Cstatus) return 1;	// one sensor (C) is receiving input
    		if(Lstatus && Rstatus && !Cstatus) return 2;	// two sensors (L & R) are receiving input
    		if(Lstatus && !Rstatus && Cstatus) return 2;	// two sensors (L & C) are receiving input
    		if(!Lstatus && Rstatus && Cstatus) return 2;	// two sensors (R & C) are receiving input
        	if(Lstatus && Rstatus && Cstatus) return 3; 	// all sensors are receiving input
    	} 
    	return 0; //if none of above conditions are met, return 0
    }
    
    private double getAngleBetweenSensors(int sideOutput, int centerOutput) {
    	if(sideOutput == GrabberConst.sensorMaxLength || centerOutput == GrabberConst.sensorMaxLength) return -361.0;
    	double y = centerOutput - sideOutput;
		double x = GrabberConst.distanceBetweenSensors;
		return Math.atan2(y, x);
	}

	//TODO verify direction for roller on/off and rollerreverse on/off -EJO
    public void RollerOn() {
    	intakeLeft.set(GrabberConst.leftRollerMaxSpeed);
    	intakeRight.set(GrabberConst.rightRollerMaxSpeed);
    }
    public void RollerOff() {
    	intakeLeft.stopMotor();
    	intakeRight.stopMotor();
    }
    public void RollerReverse() {
    	intakeLeft.set((GrabberConst.leftRollerMaxSpeed * -1)); //the negative one is to make it rotate the other way
    	intakeRight.set((GrabberConst.rightRollerMaxSpeed * -1));
    }
    public void RollerReverseOff() {
    	intakeLeft.stopMotor();
    	intakeRight.stopMotor();
    }
    //----------------------------------------
    // Other methods
    //----------------------------------------
	public void pickupOff() {
		intakeLeft.disable();
	}
}

