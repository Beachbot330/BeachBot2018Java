// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc330.subsystems;

import java.util.ArrayList;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.commands.drivecommands.Waypoint;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.util.CSVLoggable;
import org.usfirst.frc330.util.CSVLogger;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.filters.LinearDigitalFilter;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;

import org.usfirst.frc330.wpilibj.DummyPIDOutput;
import org.usfirst.frc330.wpilibj.MultiPIDController;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */

public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AHRS navX;
    private BBDoubleSolenoid shifters;
    private Encoder driveEncoderRight;
    private Encoder driveEncoderLeft;
    private Spark leftDrive1;
    private Spark leftDrive2;
    private Spark leftDrive3;
    private SpeedControllerGroup leftDrive;
    private Spark rightDrive1;
    private Spark rightDrive2;
    private Spark rightDrive3;
    private SpeedControllerGroup rightDrive;
    private AnalogInput pressureSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double  gyro_prevVal = 0.0;
    int     ctrRollOver  = 0;
    boolean fFirstUse    = true;
    double  left, right;
    
    public MultiPIDController gyroPID, leftDrivePID, rightDrivePID, limelightPID;
    private DummyPIDOutput gyroOutput, leftDriveOutput, rightDriveOutput, limelightOutput;
    
    public static final double kDefaultQuickStopThreshold = 0.2;
    public static final double kDefaultQuickStopAlpha = 0.1;
    
    private double m_quickStopThreshold = kDefaultQuickStopThreshold;
    private double m_quickStopAlpha = kDefaultQuickStopAlpha;
    private double m_quickStopAccumulator;

    public Chassis() {
    	
    	super();
    	
    	PIDSource gyroSource = new PIDSource()
        {

			@Override
			public double pidGet()
			{
				return getAngle();
			}

			@Override
			public void setPIDSourceType(PIDSourceType pidSource)
			{
			}

			@Override
			public PIDSourceType getPIDSourceType()
			{
				return PIDSourceType.kDisplacement;
			}
        	
        };
        
    	PIDSource limelightSource = new PIDSource()
        {

			@Override
			public double pidGet()
			{
				if (NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0) > 0.5) { //Check if there is a vision target in view
					return -NetworkTableInstance.getDefault().getTable("limelight").getEntry("tx").getDouble(0); //return x angle to target center
				}
				else
					return 0.0;
			}

			@Override
			public void setPIDSourceType(PIDSourceType pidSource)
			{
			}

			@Override
			public PIDSourceType getPIDSourceType()
			{
				return PIDSourceType.kDisplacement;
			}
        	
        };
        
        gyroOutput = new DummyPIDOutput();
        leftDriveOutput = new DummyPIDOutput();
        rightDriveOutput = new DummyPIDOutput();	
        limelightOutput = new DummyPIDOutput();
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        navX = new AHRS(Port.kMXP, (byte)50);
        addChild(navX);
        
        shifters = new BBDoubleSolenoid(0, 1, 2);
        addChild(shifters);
        
        driveEncoderRight = new Encoder(0, 1, false, EncodingType.k4X);
        addChild(driveEncoderRight);
        driveEncoderRight.setDistancePerPulse(1.0);
        driveEncoderRight.setPIDSourceType(PIDSourceType.kDisplacement);
        driveEncoderLeft = new Encoder(2, 3, false, EncodingType.k4X);
        addChild(driveEncoderLeft);
        driveEncoderLeft.setDistancePerPulse(1.0);
        driveEncoderLeft.setPIDSourceType(PIDSourceType.kDisplacement);
        leftDrive1 = new Spark(3);
        addChild(leftDrive1);
        leftDrive1.setInverted(true);
        leftDrive2 = new Spark(4);
        addChild(leftDrive2);
        leftDrive2.setInverted(true);
        leftDrive3 = new Spark(5);
        addChild(leftDrive3);
        leftDrive3.setInverted(true);
        leftDrive = new SpeedControllerGroup(leftDrive1, leftDrive2 , leftDrive3 );
        addChild(leftDrive);
        
        rightDrive1 = new Spark(0);
        addChild(rightDrive1);
        rightDrive1.setInverted(true);
        rightDrive2 = new Spark(1);
        addChild(rightDrive2);
        rightDrive2.setInverted(true);
        rightDrive3 = new Spark(2);
        addChild(rightDrive3);
        rightDrive3.setInverted(true);
        rightDrive = new SpeedControllerGroup(rightDrive1, rightDrive2 , rightDrive3 );
        addChild(rightDrive);
        
        pressureSensor = new AnalogInput(0);
        addChild(pressureSensor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //MultiPIDController(PIDGains gains, PIDSource source, PIDOutput output, double period, String name)
        //PIDController(double Kp, double Ki, double Kd, double Kf, PIDSource source, PIDOutput output, double period)
        gyroPID = new MultiPIDController(ChassisConst.GyroTurnLow, gyroSource, gyroOutput, 0.02,"Gyro");
        leftDrivePID = new MultiPIDController(ChassisConst.DriveLow, driveEncoderLeft, leftDriveOutput, 0.02,"LeftDrive");
        rightDrivePID = new MultiPIDController(ChassisConst.DriveLow, driveEncoderRight,rightDriveOutput, 0.02, "RightDrive");
        limelightPID = new MultiPIDController(ChassisConst.GyroTurnLow, limelightSource, limelightOutput, 0.02, "limelight");
        
        SmartDashboard.putData("gyroPID", gyroPID);
        SmartDashboard.putData("limelightPID", limelightPID);
        SmartDashboard.putData("leftDrivePID", leftDrivePID);
        SmartDashboard.putData("rightDrivePID", rightDrivePID);
        
        SmartDashboard.putNumber("QuickStopThreshold", this.kDefaultQuickStopThreshold);
        SmartDashboard.putNumber("QuickStopAlpha", this.kDefaultQuickStopAlpha);
        
        LinearDigitalFilter.movingAverage(gyroSource, ChassisConst.gyroTolerancebuffer);
        
        double pulsePerRevolutionLeft, pulsePerRevolutionRight;
    	pulsePerRevolutionRight = ChassisConst.pulsePerRevolution;
    	pulsePerRevolutionLeft = ChassisConst.pulsePerRevolution;
        
        double distanceperpulse = Math.PI*ChassisConst.wheelDiameter/pulsePerRevolutionLeft /
        		ChassisConst.encoderGearRatio/ChassisConst.gearRatio * ChassisConst.Fudgefactor;

        //VERIFY Fix these lines of code -JB
        driveEncoderRight.setReverseDirection(true);
        driveEncoderLeft.setDistancePerPulse(distanceperpulse);
        
        distanceperpulse = Math.PI*ChassisConst.wheelDiameter/pulsePerRevolutionRight /
        		ChassisConst.encoderGearRatio/ChassisConst.gearRatio * ChassisConst.Fudgefactor;
        
        driveEncoderRight.setDistancePerPulse(distanceperpulse);

        
        //-----------------------------------------------------------------------
        // Logging
        //-----------------------------------------------------------------------
        CSVLoggable temp = new CSVLoggable(true) {
			public double get() { return driveEncoderLeft.getDistance(); }
    	};
    	CSVLogger.getInstance().add("DriveTrainDistanceL", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return driveEncoderRight.getDistance(); }
    	};
    	CSVLogger.getInstance().add("DriveTrainDistanceR", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return driveEncoderLeft.getRate(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRateL", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return driveEncoderRight.getRate(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRateR", temp);    	
    	
    	temp = new CSVLoggable() {
			public double get() { return leftDrive.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainLeft", temp);
    	
    	temp = new CSVLoggable() {
			public double get() { return rightDrive.get(); }  		
    	};
    	CSVLogger.getInstance().add("DriveTrainRight", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getAngle(); }  		
    	};    	
    	CSVLogger.getInstance().add("ChassisAngle", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return gyroPID.getSetpoint(); }  		
    	};    	
    	CSVLogger.getInstance().add("GyroSetpoint", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getGyroComp(); }  		
    	};    	
    	CSVLogger.getInstance().add("GyroCompensation", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return navX.isConnected() ? 1: 0; }  		
    	};    	
    	CSVLogger.getInstance().add("GyroIsConnected", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return navX.isCalibrating() ? 1: 0; }  		
    	};    	
    	CSVLogger.getInstance().add("GyroIsCalibrating", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getX(); }  		
    	};     	
    	CSVLogger.getInstance().add("ChassisX", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getY(); }  		
    	};      	
    	CSVLogger.getInstance().add("ChassisY", temp);
    	
    	temp = new CSVLoggable(true) {
    		public double get() {return leftDrivePID.getError(); }
    	};
    	CSVLogger.getInstance().add("leftDrivePID Error", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { return getPressure(); }  		
    	};  
    	CSVLogger.getInstance().add("Pressure", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { 
				DoubleSolenoid.Value state = shifters.get();
				double state_int;
				if (state == DoubleSolenoid.Value.kForward)
					state_int = 1.0;
				else
					state_int = 0.0;
				return state_int;}  		
    	};  
    	CSVLogger.getInstance().add("Shifter", temp);
    	
    	temp = new CSVLoggable(true) {
			public double get() { 
				if (path == null) 
					return -1;
				return getNextWaypointNumber(); }  		
    	};  
    	CSVLogger.getInstance().add("NextWaypointNumber", temp);
    }

    @Override
    public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    private double x = 0, y = 0;
    private double prevLeftEncoderDistance  = 0, prevRightEncoderDistance = 0;

	public void calcXY()
	{
		 double distance, 
		 	    leftEncoderDistance, 
		 	    rightEncoderDistance, 
		 	    gyroAngle;
		 
		 leftEncoderDistance  = driveEncoderLeft.getDistance();
		 rightEncoderDistance = driveEncoderRight.getDistance();
		 gyroAngle = getAngle();
		 distance =  ((leftEncoderDistance - prevLeftEncoderDistance) + (rightEncoderDistance - prevRightEncoderDistance))/2;
		 x = x + distance * Math.sin(Math.toRadians(gyroAngle));
		 y = y + distance * Math.cos(Math.toRadians(gyroAngle));
		 prevLeftEncoderDistance  = leftEncoderDistance;
		 prevRightEncoderDistance = rightEncoderDistance;
	}
	
	/////////////////////////////////////////////////////////////
	//GET methods
	/////////////////////////////////////////////////////////////   
	
	public double getX() {
		return x;
	}
	
	public double getY() {
		return y;
	}
	
	public double getPressure() {
		double pressure;
		pressure = 35*(pressureSensor.getAverageVoltage() - 0.5);
		//SmartDashboard.putNumber("Pressure Gauge", pressure);
		return (pressure);
	}
	
    public double getAngle() {  	
    	return navX.getAngle();
    }
    
    public String getNavXFirmware() {
    	return navX.getFirmwareVersion();
    }
    
    public double getSpeed() {
    	return (driveEncoderLeft.getRate() + driveEncoderRight.getRate()) / 2;
    }
    
    public void pidDriveAuto()
    {
        double left, right, gyroValue, gyroMin;
        
        if (DriverStation.getInstance().isDisabled()) {
            stopDrive();
        }
        else {      	
        	if (Math.abs(gyroOutput.getOutput()) > 0 && gyroPID.isEnabled() && !leftDrivePID.isEnabled() && !rightDrivePID.isEnabled()) 
        		gyroMin = ChassisConst.gyroTurnMin * Math.signum(gyroOutput.getOutput());
        	else
        		gyroMin = 0;
        	
        	gyroValue = Math.signum(gyroOutput.getOutput()) * Math.min(Math.abs(gyroOutput.getOutput()+gyroMin) , 1.0);
        	left = this.left+leftDriveOutput.getOutput() + gyroValue;
            right = this.right+rightDriveOutput.getOutput() - gyroValue;
            drive(left, right);
            this.left = 0;
            this.right = 0;
        }
    } /* End pidDriveAuto() */
    
    double gyroComp = 0;
    
    public void setGyroComp(double compensation) {
    	navX.setAngleAdjustment(compensation);    	
    	//gyroComp = compensation;
    }
       
    public double getGyroComp() {
    	return gyroComp;
    }    

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void shiftHigh() {
    	shifters.set(DoubleSolenoid.Value.kReverse);
    }
    
    public void shiftLow() {
    	shifters.set(DoubleSolenoid.Value.kForward);
    }
    
    public void tankDrive(Joystick leftJoystick, Joystick rightJoystick) {
    	if(Robot.getHeight() < 40) {
    		left = -leftJoystick.getY();
    		right = -rightJoystick.getY();
    	}
    	else {
    		double scaleFactor = (1.10-0.64/68*Robot.getHeight());
    		scaleFactor = Math.max(0.45, scaleFactor);
    		left = -leftJoystick.getY() * scaleFactor;
    		right = -rightJoystick.getY() *scaleFactor;
    	}
    	
    }
        
    public void tankDrive(double left, double right) {
        this.left = left;
        this.right = right;
    }
    
    /**
     * Limit motor values to the -1.0 to +1.0 range.
     */
    protected double limit(double value) {
      if (value > 1.0) {
        return 1.0;
      }
      if (value < -1.0) {
        return -1.0;
      }
      return value;
  }
    
    public void cheesyDrive(double xSpeed, double zRotation, boolean isQuickTurn) {

          xSpeed = limit(xSpeed);

          zRotation = limit(zRotation);

          double angularPower;
          boolean overPower;

          if (isQuickTurn) {
            if (Math.abs(xSpeed) < m_quickStopThreshold) {
              m_quickStopAccumulator = (1 - m_quickStopAlpha) * m_quickStopAccumulator
                  + m_quickStopAlpha * limit(zRotation) * 2;
            }
            overPower = true;
            angularPower = zRotation;
          } else {
            overPower = false;
            angularPower = Math.abs(xSpeed) * zRotation - m_quickStopAccumulator;

            if (m_quickStopAccumulator > 1) {
              m_quickStopAccumulator -= 1;
            } else if (m_quickStopAccumulator < -1) {
              m_quickStopAccumulator += 1;
            } else {
              m_quickStopAccumulator = 0.0;
            }
          }

          left = xSpeed + angularPower;
          right = xSpeed - angularPower;

          // If rotation is overpowered, reduce both outputs to within acceptable range
          if (overPower) {
            if (left > 1.0) {
              right -= left - 1.0;
              left = 1.0;
            } else if (right > 1.0) {
              left -= right - 1.0;
              right = 1.0;
            } else if (left < -1.0) {
              right -= left + 1.0;
              left = -1.0;
            } else if (right < -1.0) {
              left -= right + 1.0;
              right = -1.0;
            }
          }

          // Normalize the wheel speeds
          double maxMagnitude = Math.max(Math.abs(left), Math.abs(right));
          if (maxMagnitude > 1.0) {
            left /= maxMagnitude;
            right /= maxMagnitude;
      }
    }
    
    /**
     * Sets the QuickStop speed threshold in curvature drive.
     *
     * <p>QuickStop compensates for the robot's moment of inertia when stopping after a QuickTurn.
     *
     * <p>While QuickTurn is enabled, the QuickStop accumulator takes on the rotation rate value
     * outputted by the low-pass filter when the robot's speed along the X axis is below the
     * threshold. When QuickTurn is disabled, the accumulator's value is applied against the computed
     * angular power request to slow the robot's rotation.
     *
     * @param threshold X speed below which quick stop accumulator will receive rotation rate values
     *                  [0..1.0].
     */
    public void setQuickStopThreshold(double threshold) {
      m_quickStopThreshold = threshold;
    }

    /**
     * Sets the low-pass filter gain for QuickStop in curvature drive.
     *
     * <p>The low-pass filter filters incoming rotation rate commands to smooth out high frequency
     * changes.
     *
     * @param alpha Low-pass filter gain [0.0..2.0]. Smaller values result in slower output changes.
     *              Values between 1.0 and 2.0 result in output oscillation. Values below 0.0 and
     *              above 2.0 are unstable.
     */
    public void setQuickStopAlpha(double alpha) {
      m_quickStopAlpha = alpha;
  }
    
    public void stopDrive() {
        if (gyroPID.isEnabled())
            gyroPID.reset();
        if (leftDrivePID.isEnabled())
            leftDrivePID.reset();
        if (rightDrivePID.isEnabled())
            rightDrivePID.reset();        
       
        tankDrive(0, 0);  
    }
	
	//Other 
	public boolean isGyroCalibrating() {
		return navX.isCalibrating();
	}
	
	public void pidDrive() {
	    double left, right;
	    if (DriverStation.getInstance().isDisabled()) {
	        stopDrive();
	    }
	    else {
	        left = this.left+leftDriveOutput.getOutput() + gyroOutput.getOutput() + limelightOutput.getOutput();
	        right = this.right+rightDriveOutput.getOutput() - gyroOutput.getOutput() - limelightOutput.getOutput() ;
	        drive(left, right);
	        this.left = 0;
	        this.right = 0;
	    }
	}
	
	public void limelightAim() {
	    double left, right;
	    if (DriverStation.getInstance().isDisabled()) {
	        stopDrive();
	    }
	    else {
	        left = this.left + limelightOutput.getOutput();
	        right = this.right - limelightOutput.getOutput();
	        drive(left, right);
	        this.left = 0;
	        this.right = 0;
	    }
	}
	
    private void drive(double left, double right) {
        leftDrive1.set(left);
        leftDrive2.set(left);
        leftDrive3.set(left);
        
        rightDrive1.set(-right);
        rightDrive2.set(-right);
        rightDrive3.set(-right);
    }
    
    public void resetPosition() {
    	driveEncoderLeft.reset();
    	driveEncoderRight.reset();
        navX.zeroYaw();
        fFirstUse = true;
        ctrRollOver = 0;
        setXY(0,0);
        this.prevLeftEncoderDistance = 0;
        this.prevRightEncoderDistance = 0;
    } /* End resetPosition */
    
    public void setXY(double x, double y) {
        this.x = x;
        this.y = y;
    } /* End setXY */

	public double getLeftDistance() 
	{
		return driveEncoderLeft.getDistance();
	}

	public double getRightDistance() {
		return driveEncoderRight.getDistance();
	}
	
    //Path methods
	ArrayList<Waypoint> path;
	int currentWaypoint = 0;
	
	public void setPath(ArrayList<Waypoint> path) {
		if ((path == null)) {
			Logger.getInstance().println("Null path in setPath", Severity.ERROR);
			Logger.getInstance().printStackTrace(new NullPointerException());
		}
		this.path = path;
		currentWaypoint = 0;
	}

	public int getNextWaypointNumber() {
		return currentWaypoint;
	}
	
	public Waypoint getNextWaypoint() {
		return path.get(getNextWaypointNumber());
	}
	
	public void incrementWaypoint() {
		if (currentWaypoint + 1 < path.size()) {
			currentWaypoint++;
		}
		else {
			Logger.getInstance().println("Attempt to increment waypoint past path", Severity.ERROR);
			Logger.getInstance().printStackTrace(new IndexOutOfBoundsException());
		}
	}
	
	public double getDistanceToEnd() {
		return getDistanceToWaypoint(path.get(path.size()-1));
	}
	
	public double getAngleToWaypoint(Waypoint waypt) {
		double deltaX = waypt.getX() - getX();
        double deltaY = waypt.getY() - getY();
        
		return Math.toDegrees(Math.atan2(deltaX, deltaY));
	}

	public double getAngleToNextWaypoint() {
		return getAngleToWaypoint(getNextWaypoint());
	}
	
	public double getDistanceBetweenWaypoints(Waypoint cur, Waypoint to) {
		double deltaX = to.getX() - cur.getX();
        double deltaY = to.getY() - cur.getY();
        
        return Math.sqrt(deltaX*deltaX+deltaY*deltaY);
	}
	
	public double getDistanceToWaypoint(Waypoint waypt) {
		Waypoint currentLocation = new Waypoint(Robot.chassis.getX(), Robot.chassis.getY(), Robot.chassis.getAngle());
        return getDistanceBetweenWaypoints(currentLocation, waypt);
	}
	
	public double getDistanceToNextWaypoint() {
		return getDistanceToWaypoint(getNextWaypoint());
	}
	
	public int getCurrentWaypointNumber() {
		return currentWaypoint;
	}
	
	public Waypoint getCurrentWaypoint() {
		return path.get(currentWaypoint);
	}
	
	public int getPreviousWaypointNumber() {
		if (currentWaypoint - 1 >= 0) {
			return currentWaypoint - 1;
		}
		else {
			Logger.getInstance().println("Attempt to get negative previous waypoint", Severity.ERROR);
			return currentWaypoint;
		}
	}
	
	public Waypoint getPreviousWaypoint() {
		if (currentWaypoint - 1 >= 0) {
			return path.get(currentWaypoint - 1);
		}
		else {
			Logger.getInstance().println("Attempt to get negative previous waypoint", Severity.ERROR);
			return path.get(currentWaypoint);
		}
	}
	
	public int getLastWaypointNumber() {
		return path.size()-1;
	}
}
