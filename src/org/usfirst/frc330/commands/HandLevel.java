// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.*;

/**
 *
 */
public class HandLevel extends BBCommand {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HandLevel() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.hand);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	double rightAngleDegInRad = Math.toRadians(90.0);
    	double armAngleDeg = Robot.arm.getArmAngle();
    	double armAngleRad = Math.toRadians(armAngleDeg);
    	double angleInRad = ((ChassisConst.liftToFrame + ChassisConst.maxExtension - (Math.sin(rightAngleDegInRad + armAngleRad) * ArmConst.length))) / HandConst.length;
    	//calculate angle of wrist to see if it is outside the perimeter
    	double currentAngleRad = Math.acos(angleInRad);
    	double currentAngleDeg = Math.toDegrees(currentAngleRad); //TODO check if the above code is correct
    	
    	//if(Robot.hand.getCalibrated()) {
    	//	Robot.hand.setAngle(0.0);
    	//}
    	
    	//TODO use currentAngleDeg to keep wrist within perimeter (keeping the hand level) (duh) (the name of the command)
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
