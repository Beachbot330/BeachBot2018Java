// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.*;
import org.usfirst.frc330.util.Logger;

/**
 *
 */
public class HandLevel extends BBCommand {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HandLevel() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.hand);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	// totalExtension is our length from the lift, if the hand were to be level
    	double totalExtension = Math.cos(Math.toRadians(Robot.arm.getArmAngle()))*ArmConst.length + HandConst.length;
    	// maxAllowable is the longest totalExtension that does not violate the rules
    	double maxAllowable = ChassisConst.liftToFrame + ChassisConst.maxExtension - HandConst.framePerimeterSafety;

    	//Calculate hand angle
    	double lengthContrArm = Math.sin(Math.toRadians(90 + Robot.arm.getArmAngle())) * ArmConst.length;
    	double lengthContrHand = maxAllowable - lengthContrArm;
    	double handAngle = Math.toDegrees(Math.acos(lengthContrHand/HandConst.length));
    	
    	// First Case - No rule violation
    	if(totalExtension < maxAllowable) {
    		Logger.getInstance().println("Hand leveled to 0 degrees. Total Extension: " + totalExtension, Logger.Severity.DEBUG);
    		Robot.hand.setAngle(0.0);
    	}
    	
    	// Second Case - Would violate, hand pointing down
    	else if(Robot.hand.getHandAngle() < 0) {
    		Logger.getInstance().println("Hand below level" , Logger.Severity.DEBUG);
    		Robot.hand.setAngle(-handAngle);
    	}
    	
    	//Third Case - Would violate, hand pointing up
    	else {
    		Logger.getInstance().println("Hand above level" , Logger.Severity.DEBUG);
    		Robot.hand.setAngle(handAngle);
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true; //Update this to false once it is confirmed that everything is working
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
