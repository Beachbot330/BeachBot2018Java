// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.commands.drivecommands.Waypoint;
import org.usfirst.frc330.util.Logger;

/**
 *
 */
public class WaitForPosition extends BBCommand {

	Waypoint wp;
	double distance;
	
	public WaitForPosition(Waypoint wp, boolean invertX, double distance, double timeout) {
    	this.setRunWhenDisabled(false);
    	this.wp = wp;
    	this.distance = distance;
    	if (invertX) {
    		this.wp.setX(-wp.getX());
    	}
    	this.setTimeout(timeout);
    }
	
    public WaitForPosition(Waypoint wp, boolean invertX, double distance) {
    	this.setRunWhenDisabled(false);
    	this.wp = wp;
    	this.distance = distance;
    	if (invertX) {
    		this.wp.setX(-wp.getX());
    	}
    }

    protected void initialize() {
    	Logger.getInstance().println("Current Postition: " + Robot.chassis.getX() + ", " + Robot.chassis.getY(), Logger.Severity.INFO);
    	Logger.getInstance().println("Wait until distance: " + distance, Logger.Severity.INFO);
    }


    protected void execute() {
    	
    }

    protected boolean isFinished() {
    	double aSQ = Math.pow((wp.getX() - Robot.chassis.getX()), 2);
    	double bSQ = Math.pow((wp.getY() - Robot.chassis.getY()), 2);
    	return (Math.sqrt(aSQ+bSQ) < distance) || this.isTimedOut();
    }

    protected void end() {
    	Logger.getInstance().println("Position when done waiting: " + Robot.chassis.getX() + ", " + Robot.chassis.getY(), Logger.Severity.INFO);
    }


    protected void interrupted() {
    }
}
