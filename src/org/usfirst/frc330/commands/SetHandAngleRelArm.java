// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.HandConst;
import org.usfirst.frc330.util.Logger;

/**
 *
 */

public class SetHandAngleRelArm extends BBCommand {

	double angle;
    public SetHandAngleRelArm(double angle, double tolerance){
    	this.angle = angle;
        requires(Robot.hand);
        Robot.arm.setArmAbsoluteTolerance(tolerance);
    }
    public SetHandAngleRelArm(double angle) {
    	this(angle, HandConst.defaultTolerance);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	Logger.getInstance().println("Setting hand angle to: " + angle, Logger.Severity.INFO);
    	Robot.hand.setAngleFromArm(angle);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Robot.hand.getHandOnTarget() && Math.abs(Robot.hand.getSetpointRelArm() - angle)<1.0;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Logger.getInstance().println("Final wrist setpoint: " + Robot.hand.getSetpointRelArm(), Logger.Severity.INFO);
    	Logger.getInstance().println("Final hand angle: " + Robot.hand.getHandAngle(), Logger.Severity.INFO);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	this.end();
    }
}
