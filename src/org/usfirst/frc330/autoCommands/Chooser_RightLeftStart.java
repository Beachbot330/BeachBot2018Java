// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.autoCommands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.BBCommand;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.autoCommands.CenterStart_Switch.SwitchPosition;
import org.usfirst.frc330.commands.drivecommands.DriveDistance;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;
import org.usfirst.frc330.wpilibj.PIDGains;



/**
 *
 */
public class Chooser_RightLeftStart extends BBCommand {
	
	public enum StartingPosition{
		RIGHT, LEFT
	}
	
	String gameData;
	Command nearNear, nearFar, farFar, farNear;
	StartingPosition startingPosition;
	
    public Chooser_RightLeftStart(StartingPosition pos) {
    	this.setRunWhenDisabled(false);
    	nearNear = new NearNear(pos);
    	nearFar = new DoNothing();
    	farFar = new DoNothing();
    	farNear = new DoNothing();
    	this.startingPosition = pos;
    }

    protected void initialize() {
		
    }


    protected void execute() {
    	gameData = DriverStation.getInstance().getGameSpecificMessage();
    	String positionCombo;
    	if(gameData.length() > 0) {
	    	if (startingPosition == StartingPosition.LEFT)
	    		positionCombo = "L" + gameData;
	    	else
	    		positionCombo = "R" + gameData;
	    	switch(positionCombo) {
		    	case "LLL":
		    		nearNear.start();
		    		break;
		    	case "LLR":
		    		nearFar.start();
		    		break;
		    	case "LRL":
		    		farNear.start();
		    		break;
		    	case "LRR":
		    		farFar.start();
		    		break;
		    	case "RLL":
		    		farFar.start();
		    		break;
		    	case "RLR":
		    		farNear.start();
		    		break;
		    	case "RRL":
		    		nearFar.start();
		    		break;
		    	case "RRR":
		    		nearNear.start();
		    		break;
	    		default:
	    			Logger.getInstance().println("Driving forward due to invalid data", Severity.ERROR);
	    			new DriveDistance(ChassisConst.driveStraightAuto, ChassisConst.defaultTolerance, 5.0, true, ChassisConst.DriveHigh).start();
	    			break;
	    	}
    	}    	
    }

    protected boolean isFinished() {
        return gameData.length() > 0 || isTimedOut();
    }

    protected void end() {
    	if (isTimedOut()) {
    		Logger.getInstance().println("No game data (or invalid data) received. Out of time, driving forward.", Severity.ERROR);
    		new DriveDistance(ChassisConst.driveStraightAuto, ChassisConst.defaultTolerance, 5.0, true, ChassisConst.DriveHigh).start(); 
    			//double distance, double tolerance, double timeout, boolean stopAtEnd, PIDGains gains
    	}
    	else
    		Logger.getInstance().println("The game data we received: " + gameData, Severity.INFO);
    }


    protected void interrupted() {
    }
}
